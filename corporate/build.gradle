apply plugin: 'com.android.application'

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile project(':core')
    compile 'com.android.support:multidex:1.0.0'
}


android {

    defaultConfig {
        minSdkVersion lowestSdkSupportVersion
        targetSdkVersion latestSdkVersion
        versionCode System.getenv("VERSION_CODE") as Integer ?: 2999
        versionName "9.22.0"
        multiDexEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }

    dexOptions {
        preDexLibraries true // increases build speed (2-4s)
        incremental true // increases build speed
        javaMaxHeapSize "4g"
        //jumboMode true
    }

    lintOptions {
        abortOnError false
    }


    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'x86'
            universalApk true
        }
    }

    packagingOptions {
        exclude 'lib/armeabi/libdatabase_sqlcipher.so'
        exclude 'lib/armeabi/libsqlcipher_android.so'
        exclude 'lib/armeabi/libstlport_shared.so'
        exclude 'lib/x86/libdatabase_sqlcipher.so'
        exclude 'lib/x86/libsqlcipher_android.so'
        exclude 'lib/x86/libstlport_shared.so'
        exclude 'lib/sources'
    }
}

// map for the version code
//Ensures architecture specific APKs have a higher version code
//(otherwise an x86 build would end up using the arm build, which x86 devices can runext.
import com.android.build.OutputFile

def versionCodes = [armeabi: 1, x86: 3]
int versionIndex = 1; // This is used so each version code is unique.

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        if ("Release" == System.getenv("art_package_type")) {
            println(">> Skipping versionCodeOverride: " + output);
        } else {
            int abiVersionCode = versionCodes.get(output.getFilter(OutputFile.ABI)) ?: versionIndex
            output.versionCodeOverride = (abiVersionCode * 1000000) + (android.defaultConfig.versionCode ?: versionIndex)
            versionIndex++
        }
    }
}
