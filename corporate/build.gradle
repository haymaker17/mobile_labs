apply plugin: 'com.android.application'

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    compile project(':core')
    compile 'com.android.support:multidex:1.0.0'
}


android {
    defaultConfig {
        versionCode System.getenv("VERSION_CODE") as Integer ?: 2999
        versionName "9.22.0"
        multiDexEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
    }

    dexOptions {
        preDexLibraries true // increases build speed (2-4s)
        incremental true // increases build speed
        javaMaxHeapSize "4g"
        //jumboMode true
    }

    lintOptions {
        abortOnError false
    }

    productFlavors {
        // Define separate dev and prod product flavors.
        phoneDev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion latestSdkVersion
            targetSdkVersion latestSdkVersion

            splits {
                abi {
                    enable true
                    reset()
                    include 'armeabi'
                    universalApk false
                }
            }
        }
        simulatorDev {
            // dev utilizes minSDKVersion = 21 to allow the Android gradle plugin
            // to pre-dex each module and produce an APK that can be tested on
            // Android Lollipop without time consuming dex merging processes.
            minSdkVersion latestSdkVersion
            targetSdkVersion latestSdkVersion

            splits {
                abi {
                    enable true
                    reset()
                    include 'x86'
                    universalApk false
                }
            }
        }
        prod {
            // The actual minSdkVersion for the application.
            minSdkVersion lowestSdkSupportVersion
            targetSdkVersion latestSdkVersion

            splits {
                abi {
                    enable true
                    reset()
                    include 'armeabi', 'x86'
                    universalApk true
                }
            }
        }
    }

    packagingOptions {
        exclude 'lib/armeabi/libdatabase_sqlcipher.so'
        exclude 'lib/armeabi/libsqlcipher_android.so'
        exclude 'lib/armeabi/libstlport_shared.so'
        exclude 'lib/x86/libdatabase_sqlcipher.so'
        exclude 'lib/x86/libsqlcipher_android.so'
        exclude 'lib/x86/libstlport_shared.so'
        exclude 'lib/sources'
    }
}

// map for the version code
//Ensures architecture specific APKs have a higher version code
//(otherwise an x86 build would end up using the arm build, which x86 devices can runext.
import com.android.build.OutputFile

def versionCodes = [armeabi: 1, x86: 3]
int versionIndex = 1; // This is used so each version code is unique.

android.applicationVariants.all { variant ->
    // assign different version code for each output
    variant.outputs.each { output ->
        if (variant.buildType.name.equals("release") && variant.productFlavors[0].name.equals("prod")) {
            def alignedOutputFile = output.outputFile
            def unalignedOutputFile = output.packageApplication.outputFile
            // Customise APK filenames (to include build version)
            if (variant.buildType.zipAlignEnabled) {
                // normal APK
                output.outputFile = new File(alignedOutputFile.parent, alignedOutputFile.name.replace("-prod", ""))
            }
            // 'unaligned' APK
            output.packageApplication.outputFile = new File(unalignedOutputFile.parent, unalignedOutputFile.name.replace(
                    "-prod", ""))
        }

        /*logger.info('INFO: variantname [' + variant.name + '] - flavor : [' + variant.productFlavors[0].name.equals("prod") + ']');
        // rename releaseProd version to release
        if (variant.buildType.name.equals("debug") && variant.productFlavors[0].name.equals("prod")) {
            def apk = output.outputFile;
            def newName = variant.baseName.replace("-prod", "");

            output.outputFile = new File(apk.parentFile, newName);

            logger.info('INFO: Set outputFile to ' + output.outputFile + " for [" + variant.name + "]");
        }*/
        int abiVersionCode = versionCodes.get(output.getFilter(OutputFile.ABI)) ?: versionIndex
        output.versionCodeOverride = (abiVersionCode * 1000000) + (android.defaultConfig.versionCode ?: versionIndex)
        versionIndex++
    }
}
