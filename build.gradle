// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply plugin: 'jacoco'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'

        /*flatDir {
            dirs 'libs' //to put aar files within libs
        }*/
    }
}

ext.latestSdkVersion = 21
ext.lowestSdkSupportVersion = 16
ext.jacocoVersion = "0.7.5.+"

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://artifactory.concurtech.net/artifactory/libs-release-local' }
        //maven { url "https://jitpack.io" }
    }
}

subprojects {
    afterEvaluate {
        if (it.hasProperty('android')) {
            android {
                compileSdkVersion latestSdkVersion
                buildToolsVersion "22.0.1"

                sourceSets {

                    main {
                        manifest.srcFile 'AndroidManifest.xml'
                        java {
                            srcDirs 'src'
                            exclude 'test/**'
                        }
                        resources.srcDirs = ['src']
                        aidl.srcDirs = ['src']
                        renderscript.srcDirs = ['src']
                        res.srcDirs = ['res']
                        assets.srcDirs = ['assets']
                    }

                    // Move the tests to tests/java, tests/res, etc...
                    instrumentTest.setRoot('tests')

                    // Move the build types to build-types/<type>
                    // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
                    // This moves them out of them default location under src/<type>/... which would
                    // conflict with src/ being used by the main source set.
                    // Adding new build types or product flavors should be accompanied
                    // by a similar customization.
                    debug.setRoot('build-types/debug')
                    release.setRoot('build-types/release')
                }
            }
        }
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

/ * BEGIN CODE COVERAGE * /
apply plugin: "sonar-runner"

sonarRunner {
    sonarProperties {
        property 'sonar.host.url', 'https://cmo-sonar01.concurtech.net:9000/'
        property 'sonar.login', 'jenkinsdev'
        property 'sonar.password', 'pass99'
        property 'sonar.jdbc.url', 'jdbc:postgresql://i-eb41cc1c.concur.concurtech.org/sonar'
        property 'sonar.jdbc.username', 'sonar'
        property 'sonar.jdbc.password', 'sonarpass1'

        property 'sonar.log.level', 'DEBUG'

//        property 'sonar.host.url', 'http://localhost:9000'
//        property 'sonar.login', 'admin'
//        property 'sonar.password', 'admin'

        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.language', 'java'
        properties["sonar.java.libraries"] = "**/*.jar"

        // Project information.
        property "sonar.projectKey", "com.concur.breeze"
        property "sonar.projectName", "ConcurMobileAndroid"
        property "sonar.projectVersion", "9.27.0-SNAPSHOT"
    }
}

/**
 *  List of modules that require Jacoco
 */
def includedInJacocoFullReport = [
        'base',
        'core',
        'platform'
]

/**
 *  Apply additional build steps to sub-projects
 */
subprojects { prj ->

    // Apply Jacoco only if the project is in the include list
    if (includedInJacocoFullReport.contains(prj.name)) {

        apply plugin: "jacoco"

        jacoco {
            version '0.7.2.+'
        }

        def variantName = ""
        def classDirectoriesString = "debug"

        // Need to specify the project 'platform' (and others, if we decide to get code coverage
        // on them), since it is a different build flavor.
        if (prj.name.equals("platform")) {
            variantName = "production"
            classDirectoriesString = "production/debug"
        }

        task jacocoReport(type: JacocoReport, dependsOn: "test${variantName.capitalize()}Debug") {
            group = 'Reporting'
            description = 'Generate Jacoco coverage reports after running tests.'

            reports {
                xml.enabled = true
                html.enabled = true
            }

            classDirectories = fileTree(
                    dir: "build/intermediates/classes/${classDirectoriesString}",
                    excludes: [
                            '**/R*.class',
                            '**/BuildConfig*'
                    ]
            )

            sourceDirectories = files('src')
            executionData = files("build/jacoco/test${variantName.capitalize()}Debug.exec")

            doFirst {
                files("build/intermediates/classes/${classDirectoriesString}").getFiles().each { file ->
                    if (file.name.contains('$$')) {
                        file.renameTo(file.path.replace('$$', '$'))
                    }
                }
            }
        }

        sonarRunner {
            sonarProperties {
                // sonar.sources: must be included to run analysis on.
                properties["sonar.sources"] = "src/com"
                // sonar.jacoco.reportPath: specifies where the jacoco .exec files are found to load into SonarQube.
                properties["sonar.jacoco.reportPath"] = "build/jacoco/test${variantName.capitalize()}Debug.exec"
                // sonar.java.binaries: specify binaries
                properties["sonar.java.binaries"] = "build/intermediates/classes/${classDirectoriesString}"
            }
        }
    }
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    def projects = new ArrayList()
    subprojects.each { prj ->
        if (includedInJacocoFullReport.contains(prj.name)) {
            projects.add(prj)
        }
    }

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    additionalSourceDirs = generateSourceFiles(projects)
    sourceDirectories = generateSourceFiles(projects)
    classDirectories = generateClassDirs(projects)
    executionData = files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination 'build/reports/jacoco/full'
        }
        xml {
            enabled true
            destination 'build/reports/jacoco/full/jacocoFullReport.xml'
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData = files(executionData.findAll { it.exists() })
    }
}

/**
 *  Generate a FileCollection of all projects source files
 */
FileCollection generateSourceFiles(Collection projects) {
    def dirs = []

    projects.each { prj ->
        dirs.add("${prj.name}/src")
    }

    return files(dirs)
}

/**
 *  Generate a FileCollection of all projects class files
 */
FileCollection generateClassDirs(Collection projects) {
    def tree = fileTree('directory does not exists') // I know it's ugly :)

    def classDirectoriesString = "debug"

    projects.each { prj ->
        //noinspection GrReassignedInClosureLocalVar

        // Need to specify the project 'platform' (and others, if we decide to get code coverage
        // on them), since it is a different build flavor.
        if (prj.name.equals("platform")) {
            classDirectoriesString = "production/debug"
        }

        tree += fileTree(
                dir: "${prj.name}/build/intermediates/classes/${classDirectoriesString}",
                excludes: [
                        '**/R*.class',
                        '**/BuildConfig*'
                ]
        )
    }

    return tree
}

/ * END CODE COVERAGE * /